package beg.java.collections.StackExercise;

import java.util.Iterator;
import java.util.Stack;

public class Brackets {
	
	private String expressionValue;
	
	public Brackets(String expressions) {
		expressionValue = expression;
	}
	
	
	
//	public static boolean accurateBrack(Stack a) {
//		
//		for(int i = 0; i< a.capacity(); i++) {
//			if(a.get(i).equals("(")){
//				for(int x = 1; x < a.capacity(); x++) {
//					return (a.contains(")"));
//				}
//			}else if(a.get(i).equals("{")) {
//				for(int x = 1; x < a.capacity(); x++) {
//					return (a.contains("}"));
//				}
//			}
//		}
//		
//		
//		return false;
//	}
	
	public boolean check() {
		
		Iterator<Character> it = iterator();
		Stack<String> openningBrackets = new Stack();
		
		while(it.hasNext()) {
			if(isOpeningBracket(it.next())) {
				openningBrackets.push(bracket);
			}else if(isClosingBracket(bracket)) {
				
				if(openningBrackets.empty()) return false;
				
				char lastBracket = openningBrackets.pop();
				
			}
		}
		return false;
	}
	
	private boolean isOpeningBracket(char bracket) {
		return bracket == '(' || bracket == '{' || bracket == '[';
	}
	
	
	
	public class BracketExpressionIterator implements Iterator<Character>{
		
		private int currentIndex;
		private char[] brackets = expressionValue.toCharArray();

		@Override
		public boolean hasNext() {
			return currentIndex < brackets.length;
			
		}

		@Override
		public Character next() {
			char bracket = brackets[currentIndex];
			return null;
		}
		
	}
	
	public Iterator iterator() {
		return new BracketExpressionIterator();
		}

}
