package ba.yzl.LinkedListUtils;
import java.util.List;

public class LinkeddList<E> {
	
	 public String toString(){
	        String retStr = "Contents:\n";

	        Node current = rootNode;
	        while(current != null){
	            retStr += current.getData() + "\n";
	            current = current.getNextNode();
	            }
	        return retStr;

	        }
	
	private Node rootNode;
	private int size;
	
	public LinkeddList() {
		rootNode = new Node();
		size = 0;
	}
	
	public LinkeddList(E e) {
		rootNode = new Node(e,null);
	}
	
	
	public void setSize(int size) {
		this.size = size;
	}
	
	public int getSize() {
		return size;
	}
	
	public void add (E val) {
		
		Node newNode = new Node(val,null); // eklenecek olan node olusturuldu 
		
		Node prevNode = null;
		
		Node lastNode = null;
		
		if(rootNode.nextNode == null) {
			// bu rootNode son elemandir anlamina gelir , o zaman nextNode unu direk newNode a set edebiliriz yani sonuna ekleyebiliriz. Artik null`a degi newNode a isaret ediyor. newNode ise artik yeni last Node`umuz .
			rootNode.setNextNode(newNode);
			rootNode = newNode; // yeniden if`e duserse artik root newNode olarak alinsin islem o nodda tekrar etsin diye .
		} while (rootNode.nextNode != null) {// listenin sonunda degiliz sonuna gitmemiz lazim
			rootNode = rootNode.getNextNode();
			
		} rootNode.nextNode.setNextNode(newNode);
			rootNode = newNode;
		
	}
	
	
	public static void main(String[] args) {
		
		LinkeddList<Integer> myList = new LinkeddList(3);
		
		myList.add(5);
		
		myList.add(56);
		
		
		System.out.println(myList.toString());
	}
	

	
	
	private class Node<E> {
		private E data;
		private Node nextNode;
		
		private Node () { //empty constructor
			
		}
		
		private Node(E data) {
			this.data = data;
		}
		
		private Node(E data, Node nextNode) {
			
			this.data = data;
			this.nextNode = nextNode;
		}
		
		public void setData(E data) {
			this.data = data;
		}
		
		public E getData() {
			return data;
		}
		
		public void setNextNode(Node nextNode) {
			this.nextNode = nextNode;
		}
		
		public Node getNextNode() {
			return nextNode;
		}
		
	
	}
	

	 }
